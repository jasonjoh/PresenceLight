# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
 branches:
   include:
   - master
 paths:
   exclude:
   - azure-pipelines-worker.yml
   - .github/workflows/main.yml
   - src/PresenceLight.Worker/*


variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  
jobs:
- job: Build
  pool:
    name: Hosted Windows 2019 with VS2019
    demands: msbuild

  strategy:
    matrix:
      Channel_CD_Web:
        ChannelName: CD-Web
        DistributionUrl: https://presencelightapp.azurewebsites.net/CD
        MsixPackageId: PresenceLight.CD
        MsixPublisherId: CN=Presence Light, O=Isaac Levin, C=US
        MsixPackageDisplayName: PresenceLight (CD)
        MsixBuildMode: SideLoadOnly
        MsixGenerateAppInstaller: true
      Channel_Prod_Web:
        ChannelName: Prod-Web
        DistributionUrl: https://presencelight.z5.web.core.windows.net/Prod
        MsixPackageId: PresenceLight
        MsixPublisherId: CN=Presence Light, O=Isaac Levin, C=US
        MsixPackageDisplayName: PresenceLight
        MsixBuildMode: SideLoadOnly
        MsixGenerateAppInstaller: true
      Channel_MS_Prod_Web:
        ChannelName: MS-Prod-Web
        DistributionUrl: https://presencelight.z5.web.core.windows.net/MSFT
        MsixPackageId: PresenceLight
        MsixPublisherId: CN=Presence Light, O=Isaac Levin, C=US
        MsixPackageDisplayName: PresenceLight
        MsixBuildMode: SideLoadOnly
        MsixGenerateAppInstaller: true

  steps:
  - task: DotNetCoreCLI@2  
    inputs:
      command: custom
      custom: tool
      arguments: install -g nbgv
    displayName: Install NBGV tool

  - script: nbgv cloud -c -a
    displayName: Set Version

  - powershell: |
      # Update appxmanifest. This must be done before build.
      # Set the per-channel values into the appxmanifest, replacing the checked-in values
      [xml]$manifest= get-content ".\src\PresenceLight.Package\Package.appxmanifest"
      $manifest.Package.Identity.Version = "$(GitBuildVersionSimple).0"
      $manifest.Package.Identity.Name = "$(MsixPackageId)"
      $manifest.Package.Identity.Publisher = "$(MsixPublisherId)"
      $manifest.Package.Properties.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.Package.Applications.Application.VisualElements.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.save(".\src\PresenceLight.Package\Package.appxmanifest")
    displayName: Update manifest version

  - powershell: |
      # Update App Insights instrumentation key
      [xml]$doc = Get-Content ".\src\PresenceLight\App.config"
      $node=$doc.configuration.appSettings
      $node.InnerText = "$(AppInsightsKey)"
      $doc.save(".\src\PresenceLight\App.config")
    displayName: Set AppInsights Config in App.config
    env:
      AppInsightsKey: $(AppInsightsKey)
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['AppInsightsKey'], '')))


  - powershell: |
      # Update App Insights instrumentation key
      [xml]$doc = Get-Content ".\src\PresenceLight\ApplicationInsights.config"
      $doc.ApplicationInsights.InstrumentationKey = "$(AppInsightsKey)"
      $doc.save(".\src\PresenceLight\ApplicationInsights.config")
    displayName: Set AppInsights Config in ApplicationInsightsConfig
    env:
      AppInsightsKey: $(AppInsightsKey)
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['AppInsightsKey'], '')))


  - powershell: |
      # Update appsettings.json. This must be done before build.
      $appsettings= get-content ".\src\PresenceLight\appsettings.json" -raw | ConvertFrom-Json
      $appsettings.tenantId = "$env:TenantId"
      $appsettings.clientId = "$env:ApplicationId"
      $appsettings | ConvertTo-Json -depth 32| set-content '.\src\PresenceLight\appsettings.json'
    displayName: Update appsettings.json
    env:
     ApplicationId: $(ApplicationId)
     TenantId: $(TenantId)
    condition: and(succeeded(), eq(variables['ChannelName'], 'MS-Prod-Web'))

  - task: MSBuild@1
    displayName: Build for $(BuildConfiguration)
    inputs:
      solution: src/PresenceLight.sln
      platform: x86
      msbuildArguments: /restore /p:AppInstallerUri=$(DistributionUrl) /p:UapAppxPackageBuildMode=$(MsixBuildMode) /p:GenerateAppInstallerFile=$(MsixGenerateAppInstaller)
      configuration: $(BuildConfiguration)
      maximumCpuCount: false

  - script: copy src\build.cer src\PresenceLight.Package\AppPackages\PresenceLight.Package_$(GitBuildVersionSimple).0_x86_Test\PresenceLight.Package_$(GitBuildVersionSimple).0_x86.cer
    displayName: Copy Certificate to versioned dir
    condition: and(succeeded(), not(eq(variables['ChannelName'], 'Prod-Store')))

  - task: CmdLine@2
    displayName: Copy PDBs
    inputs:
      script: |
        copy src\PresenceLight\bin\$(BuildConfiguration)\PresenceLight.pdb src\PresenceLight.Package\AppPackages\PresenceLight.Package_$(GitBuildVersionSimple).0_x86_Test\PresenceLight.pdb
        copy src\PresenceLight.Core\bin\$(BuildConfiguration)\netstandard2.0\PresenceLight.Core.pdb src\PresenceLight.Package\AppPackages\PresenceLight.Package_$(GitBuildVersionSimple).0_x86_Test\PresenceLight.Core.pdb


  - powershell: |
      # Update badges
      [xml]$badge = Get-Content ".\Build\ci_badge.svg"
      $badge.svg.g[1].text[2].InnerText = "$(GitBuildVersionSimple).0"
      $badge.svg.g[1].text[3].InnerText = "$(GitBuildVersionSimple).0"
      $badge.Save("src\PresenceLight.Package\AppPackages\ci_badge.svg")
      [xml]$badge = Get-Content ".\Build\store_badge.svg"
      $badge.svg.g[1].text[2].InnerText = "$(GitBuildVersionSimple).0"
      $badge.svg.g[1].text[3].InnerText = "$(GitBuildVersionSimple).0"
      $badge.Save("src\PresenceLight.Package\AppPackages\stable_badge.svg")
    displayName: Update badge versions

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(ChannelName)
      targetPath: src/PresenceLight.Package/AppPackages
